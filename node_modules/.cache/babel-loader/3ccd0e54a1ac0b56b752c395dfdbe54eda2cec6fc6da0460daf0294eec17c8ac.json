{"ast":null,"code":"var _jsxFileName = \"/Users/nobuoezaki/Desktop/ezaki-lab/my-app/src/DateView.js\",\n  _s = $RefreshSig$();\n// 参考 https://qiita.com/FumioNonaka/items/1810f7e211638988af62\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport FullCalendar from \"@fullcalendar/react\";\nimport dayGridPlugin from \"@fullcalendar/daygrid\"; // pluginは、あとから\nimport allLocales from '@fullcalendar/core/locales-all';\nimport interactionPlugin from \"@fullcalendar/interaction\";\nimport axios from 'axios';\n// axios.defaults.baseURL = 'http://localhost:3000';\n// axios.defaults.headers.post['Content-Type'] = 'application/json;charset=utf-8';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const DateView = () => {\n  _s();\n  // const [posts, setPosts] = useState([]); //\n  const [events, setEvents] = useState([]);\n  // const [startDate, setStartDate] = useState('');\n  // const [endDate, setEndDate] = useState('');\n\n  // 日付をクリックした時\n  const HandleDateClick = useCallback(arg => {\n    alert(arg.dateStr);\n  }, []);\n\n  // 前後の月に移動した時 https://zenn.dev/takky94/articles/7d10cfc95c77de\n  const HandleDatesClick = arg => {\n    const tempStartDate = arg.start;\n    const tempEndDate = arg.end;\n\n    // setStartDate(`${tempStartDate.getFullYear()}-${tempStartDate.getMonth()+1}-${tempStartDate.getDate()}`);\n    // setEndDate(`${tempEndDate.getFullYear()}-${tempEndDate.getMonth()+1}-${tempEndDate.getDate()}`);\n  };\n\n  const SetEvent = async () => {\n    //非同期関数\n    // 現在の年と月を取得\n    const d = new Date();\n    // APIからデータを取得\n    const DateURL = `https://ezaki-lab.littlestar.jp/nict/api/get_date.php?start_date=${d.getFullYear()}-${d.getMonth() + 1}-1&end_date=${d.getFullYear()}-${d.getMonth() + 2}-1`;\n    // setStartDate(`${d.getFullYear()}-${d.getMonth()+1}-1`);\n    // setEndDate(`${d.getFullYear()}-${d.getMonth()+2}-1`);\n\n    try {\n      const response = await axios.post(DateURL);\n      setPosts(response.data);\n      let event_date = [];\n      for (let i = 0; i < response.data.length; i++) {\n        event_date.push({\n          title: \"データあり\",\n          date: `${response.data[i]['date']}`\n        });\n      }\n      setEvents(event_date);\n      setPosts(response.data);\n    } catch (error) {\n      // console.error(error);\n      switch (error.response.status) {\n        case 400:\n          console.log('認証エラーです');\n          break;\n        case 401:\n          console.log('認証エラーです');\n          break;\n        case 404:\n          console.log('URL先がないです');\n          break;\n        default:\n          console.log(error);\n      }\n    }\n    ;\n  };\n\n  // 第2因数の値に変化があったときに実行\n  useEffect(() => {\n    SetEvent();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"date_div\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"\\u65E5\\u4ED8\\u9078\\u629E\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(FullCalendar, {\n      plugins: [dayGridPlugin, interactionPlugin],\n      initialView: \"dayGridMonth\" //表示の種類\n      ,\n      locales: allLocales //全部を日本語化\n      ,\n      locale: \"ja\" //日本語表記\n      // イベントを表示 forで配列作って入れ込む?\n      ,\n      events: events,\n      dateClick: HandleDateClick,\n      datesSet: HandleDatesClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, this);\n};\n_s(DateView, \"8SNOFLH4npt7TE0w0H8sI5gjcYY=\");\n_c = DateView;\nvar _c;\n$RefreshReg$(_c, \"DateView\");","map":{"version":3,"names":["React","useCallback","useEffect","useState","FullCalendar","dayGridPlugin","allLocales","interactionPlugin","axios","jsxDEV","_jsxDEV","DateView","_s","events","setEvents","HandleDateClick","arg","alert","dateStr","HandleDatesClick","tempStartDate","start","tempEndDate","end","SetEvent","d","Date","DateURL","getFullYear","getMonth","response","post","setPosts","data","event_date","i","length","push","title","date","error","status","console","log","id","children","fileName","_jsxFileName","lineNumber","columnNumber","plugins","initialView","locales","locale","dateClick","datesSet","_c","$RefreshReg$"],"sources":["/Users/nobuoezaki/Desktop/ezaki-lab/my-app/src/DateView.js"],"sourcesContent":["// 参考 https://qiita.com/FumioNonaka/items/1810f7e211638988af62\nimport React, {useCallback, useEffect, useState} from \"react\";\nimport FullCalendar from \"@fullcalendar/react\";\nimport dayGridPlugin from \"@fullcalendar/daygrid\"; // pluginは、あとから\nimport allLocales from '@fullcalendar/core/locales-all';\nimport interactionPlugin from \"@fullcalendar/interaction\";\nimport axios from 'axios';\n// axios.defaults.baseURL = 'http://localhost:3000';\n// axios.defaults.headers.post['Content-Type'] = 'application/json;charset=utf-8';\n\nexport const DateView = () => {\n  // const [posts, setPosts] = useState([]); //\n  const [events, setEvents] = useState([]);\n  // const [startDate, setStartDate] = useState('');\n  // const [endDate, setEndDate] = useState('');\n\n  // 日付をクリックした時\n  const HandleDateClick = useCallback((arg) => {\n    alert(arg.dateStr);\n  }, []);\n\n  // 前後の月に移動した時 https://zenn.dev/takky94/articles/7d10cfc95c77de\n  const HandleDatesClick = (arg) => {\n    const tempStartDate = arg.start;\n    const tempEndDate = arg.end;\n\n    // setStartDate(`${tempStartDate.getFullYear()}-${tempStartDate.getMonth()+1}-${tempStartDate.getDate()}`);\n    // setEndDate(`${tempEndDate.getFullYear()}-${tempEndDate.getMonth()+1}-${tempEndDate.getDate()}`);\n  }\n\n  const SetEvent = async () => { //非同期関数\n    // 現在の年と月を取得\n    const d = new Date();\n    // APIからデータを取得\n    const DateURL = `https://ezaki-lab.littlestar.jp/nict/api/get_date.php?start_date=${d.getFullYear()}-${d.getMonth()+1}-1&end_date=${d.getFullYear()}-${d.getMonth()+2}-1`;\n    // setStartDate(`${d.getFullYear()}-${d.getMonth()+1}-1`);\n    // setEndDate(`${d.getFullYear()}-${d.getMonth()+2}-1`);\n    \n    try {\n      const response = await axios.post(DateURL);\n      setPosts(response.data);\n      let event_date = [];\n      for(let i = 0; i < response.data.length; i++) {\n        event_date.push({title : \"データあり\", date : `${response.data[i]['date']}`});\n      }\n      setEvents(event_date);\n\n      setPosts(response.data);\n    }\n    catch(error) {\n      // console.error(error);\n      switch (error.response.status) {\n        case 400:\n          console.log('認証エラーです');\n          break;\n        case 401:\n          console.log('認証エラーです');\n          break;\n        case 404:\n          console.log('URL先がないです');\n          break;\n        default:\n          console.log(error);\n      }\n    };\n\n  }\n\n  // 第2因数の値に変化があったときに実行\n  useEffect(() => {\n    SetEvent();\n  }, []);\n  \n\n  return(\n    <div id=\"date_div\">\n      <h1>日付選択</h1>\n      <FullCalendar \n        plugins={[dayGridPlugin, interactionPlugin]} \n        initialView=\"dayGridMonth\" //表示の種類\n        locales={allLocales} //全部を日本語化\n        locale=\"ja\" //日本語表記\n        // イベントを表示 forで配列作って入れ込む?\n        events={events}\n        dateClick={HandleDateClick}\n        datesSet={HandleDatesClick}\n      />\n    </div>\n  )\n}"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAGC,WAAW,EAAEC,SAAS,EAAEC,QAAQ,QAAO,OAAO;AAC7D,OAAOC,YAAY,MAAM,qBAAqB;AAC9C,OAAOC,aAAa,MAAM,uBAAuB,CAAC,CAAC;AACnD,OAAOC,UAAU,MAAM,gCAAgC;AACvD,OAAOC,iBAAiB,MAAM,2BAA2B;AACzD,OAAOC,KAAK,MAAM,OAAO;AACzB;AACA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEA,OAAO,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC5B;EACA,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EACxC;EACA;;EAEA;EACA,MAAMY,eAAe,GAAGd,WAAW,CAAEe,GAAG,IAAK;IAC3CC,KAAK,CAACD,GAAG,CAACE,OAAO,CAAC;EACpB,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMC,gBAAgB,GAAIH,GAAG,IAAK;IAChC,MAAMI,aAAa,GAAGJ,GAAG,CAACK,KAAK;IAC/B,MAAMC,WAAW,GAAGN,GAAG,CAACO,GAAG;;IAE3B;IACA;EACF,CAAC;;EAED,MAAMC,QAAQ,GAAG,MAAAA,CAAA,KAAY;IAAE;IAC7B;IACA,MAAMC,CAAC,GAAG,IAAIC,IAAI,CAAC,CAAC;IACpB;IACA,MAAMC,OAAO,GAAI,oEAAmEF,CAAC,CAACG,WAAW,CAAC,CAAE,IAAGH,CAAC,CAACI,QAAQ,CAAC,CAAC,GAAC,CAAE,eAAcJ,CAAC,CAACG,WAAW,CAAC,CAAE,IAAGH,CAAC,CAACI,QAAQ,CAAC,CAAC,GAAC,CAAE,IAAG;IACzK;IACA;;IAEA,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMtB,KAAK,CAACuB,IAAI,CAACJ,OAAO,CAAC;MAC1CK,QAAQ,CAACF,QAAQ,CAACG,IAAI,CAAC;MACvB,IAAIC,UAAU,GAAG,EAAE;MACnB,KAAI,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,QAAQ,CAACG,IAAI,CAACG,MAAM,EAAED,CAAC,EAAE,EAAE;QAC5CD,UAAU,CAACG,IAAI,CAAC;UAACC,KAAK,EAAG,OAAO;UAAEC,IAAI,EAAI,GAAET,QAAQ,CAACG,IAAI,CAACE,CAAC,CAAC,CAAC,MAAM,CAAE;QAAC,CAAC,CAAC;MAC1E;MACArB,SAAS,CAACoB,UAAU,CAAC;MAErBF,QAAQ,CAACF,QAAQ,CAACG,IAAI,CAAC;IACzB,CAAC,CACD,OAAMO,KAAK,EAAE;MACX;MACA,QAAQA,KAAK,CAACV,QAAQ,CAACW,MAAM;QAC3B,KAAK,GAAG;UACNC,OAAO,CAACC,GAAG,CAAC,SAAS,CAAC;UACtB;QACF,KAAK,GAAG;UACND,OAAO,CAACC,GAAG,CAAC,SAAS,CAAC;UACtB;QACF,KAAK,GAAG;UACND,OAAO,CAACC,GAAG,CAAC,WAAW,CAAC;UACxB;QACF;UACED,OAAO,CAACC,GAAG,CAACH,KAAK,CAAC;MACtB;IACF;IAAC;EAEH,CAAC;;EAED;EACAtC,SAAS,CAAC,MAAM;IACdsB,QAAQ,CAAC,CAAC;EACZ,CAAC,EAAE,EAAE,CAAC;EAGN,oBACEd,OAAA;IAAKkC,EAAE,EAAC,UAAU;IAAAC,QAAA,gBAChBnC,OAAA;MAAAmC,QAAA,EAAI;IAAI;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACbvC,OAAA,CAACN,YAAY;MACX8C,OAAO,EAAE,CAAC7C,aAAa,EAAEE,iBAAiB,CAAE;MAC5C4C,WAAW,EAAC,cAAc,CAAC;MAAA;MAC3BC,OAAO,EAAE9C,UAAW,CAAC;MAAA;MACrB+C,MAAM,EAAC,IAAI,CAAC;MACZ;MAAA;MACAxC,MAAM,EAAEA,MAAO;MACfyC,SAAS,EAAEvC,eAAgB;MAC3BwC,QAAQ,EAAEpC;IAAiB;MAAA2B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC5B,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAAArC,EAAA,CA/EYD,QAAQ;AAAA6C,EAAA,GAAR7C,QAAQ;AAAA,IAAA6C,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}